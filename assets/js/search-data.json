{
  
    
        "post0": {
            "title": "porder: Ordering and Downloading Planet Labs imagery from the command line",
            "content": "Tutorial Setup with Binder (less setup needed, doesn&#39;t run on your own machine) . Click the link: | You&#39;ll be able to access the tutorial through your browser after a bit of setup. You&#39;ll then authenticate your Planet account using the planet init command. You can open a Terminal in the jupyter launcher that opens from the link you just clicked on and then run planet init. You&#39;ll need your username and password. | Open this notebook and you are ready to go! This method gets you up and running using porder quickly but you can&#39;t use it as a day to day work environment, see the setup guide below for your own machine. | Tutorial Setup (using your own machine) . Install git following instructions for your operating system: https://carpentries.github.io/workshop-template/#git | Install the Anaconda distribution of python 3.7, following the instructions for your operating system (make sure to check the box that says add Anaconda to system path): https://carpentries.github.io/workshop-template/#python The installer might ask you to close and re-open your terminal and/or run conda init to finish the installation. Follow it&#39;s instructions and then continue on. | . | Download this repository and notebook with the terminal command: git clone https://github.com/rbavery/porder_tutorial.git | cd porder_tutorial | conda env create -f environment.yml -n porder_tutorial | conda activate porder_tutorial | planet init | jupyter lab | First things first, what&#39;s this notebook thing? . For this tutorial we will be running terminal commands from within a jupyter notebook. A jupyter notebook allows you to mix code and markdown (basically, text) wihtin a single document. As we step through and execute the commands, take notes in a seperate markdown cell (like this one!). After the tutorial, refer back to your notebook or the porder documentation in case you get stuck using porder. You can use porder through your native shell or the notebook, but we will use the notebook today so that all the commands you run are saved and you can refer to them later. . You can turn a code cell into a markdown cell or vice-versa by using the menu bar above. Keyboard shortcuts for manipulating the jupyter notebook are listed in help, feel free to try these out as we go along. Typing &quot;M&quot; turns a cell to Markdown. &quot;Y&quot; turns it into a code cell . Change the code cell below to a Markdown cell. What happened? . Before continuing through the notebook, make sure you have installed porder. If you had to install porder in a conda environment then make sure you have also installed ipykernel in that environment. If any of this is confusing or you need help getting porder installed and usable in your notebook, get in touch with Ryan (ravery@ucsb.edu) . ! makes the cell execute bash code instead of python code. Here we list out the files and folders in out current working directory (cwd). The cwd is the same as the directory where we started the jupyter notebook . !ls -F . apt.txt environment.yml README.md data/ porder_tutorial.ipynb san_pedro_section.geojson . All terminal programs available in your native shell are available through the notebook, including porder. If you are working on this notebook via Binder, then first open a Terminal and run planet init to authenticate with your Planet Labs account . !porder -h . usage: porder [-h] {version,quota,shp2geojson,base64,simplify,idlist,difflist,idsplit,idcheck,bundles,order,ordersize,ostate,stats,download,multipart,multiproc} ... Ordersv2 Simple Client positional arguments: {version,quota,shp2geojson,base64,simplify,idlist,difflist,idsplit,idcheck,bundles,order,ordersize,ostate,stats,download,multipart,multiproc} version Prints porder version and exists quota Prints your Planet Quota Details shp2geojson Convert all shapefiles in folder to GeoJSON base64 Base 64 encode a JSON file simplify Simplifies geometry to number of vertices specified using Visvalingam-Wyatt line simplification algorithm idlist Get idlist using geometry &amp; filters difflist Checks the difference between local files and available Planet assets idsplit Splits ID list incase you want to run them in small batches idcheck Check idlist for estimating clipped area bundles Check bundles of assets for given tiem type order Place an order &amp; get order url currently supports &#34;toar&#34;,&#34;clip&#34;,&#34;composite&#34;,&#34;reproject&#34;,&#34;compression&#34; ordersize Estimate total download size ostate Get list of orders by state and date range stats Prints number of orders queued and running for org &amp; user download Downloads all files in your order multipart Uses multiprocessing to download for all files in your order multiproc Multiprocess based downloader to download for all files in your order optional arguments: -h, --help show this help message and exit . Before using any of these porder commands, you&#39;ll need to authenticate using the planet init command. This is one spot where we can&#39;t use the notebook. Click the + sign in the upper left that represents &quot;New Launcher&quot;. Launch a Terminal from that window that opens up when you click the +. Then run planet init in the Terminal. You will need your email and password for your Planet Account (If you don&#39;t have this, email Ryan at ravery@ucsb.edu, you&#39;ll need to be added as a departmental user). . There are a lot of commands available, but the ones I&#39;ve used most often include: . porder idlist to search for planet imagery in an area of interest and create the list of ids used to order imagery | porder order to place the order | porder multiproc to download the order | We will run these 3 commands to order some 4-band 3.5 meter Planetscope imagery over the San Pedro Riparian National Conservation Area . If you would like to work with a different area for this tutorial, you can quickly draw a bounding box or polygon and download it in geojson format using this tool: http://geojson.io/#map=2/20.0/0.0 . To get help for a particular command, run that command with the -h flag . !porder idlist -h . usage: porder idlist [-h] --input INPUT --start START --end END --item ITEM [--asset ASSET] --outfile OUTFILE [--cmin CMIN] [--cmax CMAX] [--number NUMBER] [--overlap OVERLAP] [--filters FILTERS [FILTERS ...]] optional arguments: -h, --help show this help message and exit Required named arguments.: --input INPUT Input geometry file for now geojson/json/kml --start START Start date in format YYYY-MM-DD --end END End date in format YYYY-MM-DD --item ITEM Item Type PSScene4Band|PSOrthoTile|REOrthoTile etc --asset ASSET Asset Type analytic, analytic_sr,visual etc --outfile OUTFILE Output csv file Optional named arguments: --cmin CMIN Minimum cloud cover 0-1 represents 0 to 100 --cmax CMAX Maximum cloud cover 0-1 represents 0 to 100 --number NUMBER Total number of assets, give a large number if you are not sure --overlap OVERLAP Percentage overlap of image with search area range between 0 to 100 --filters FILTERS [FILTERS ...] Add an additional string or range filter, Read Me . We will order a scene with 100% overlap in our study area, less than 5% cloud cover, and limit the number of assets returned to 1 for demonstration. Make sure to wrap arguments in quotes &quot;&quot; and use relative paths instead of absolute paths for the --outfile and --input geojson. As you can see, a single order can have lots of flags and turn out to be very long, so make sure refer back to this notebook or the porder github page if you get stuck typing one of these out. . Run pwd to find your home directory and edit the paths for each command according to where the tutorial files are located on your computer. . !pwd . /home/jovyan . Don&#39;t worry about these deprecation warnings . !porder idlist --input &quot;/home/jovyan/san_pedro_section.geojson&quot; --start &quot;2019-06-01&quot; --end &quot;2019-06-08&quot; --item &quot;PSScene4Band&quot; --asset &quot;analytic_sr&quot; --outfile &quot;/home/jovyan/data/idlist.csv&quot; --cmax &quot;.05&quot; --number &quot;1&quot; --overlap &quot;100&quot; . Running search for a maximum of: 1 assets /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) /srv/conda/envs/notebook/lib/python3.6/site-packages/pyproj/crs.py:77: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. return _prepare_from_string(&#34; &#34;.join(pjargs)) Total number of assets written to /home/jovyan/data/idlist.csv ===&gt; 1 Total estimated cost to quota: 181 sqkm Total estimated cost to quota if clipped: 181 sqkm . !porder order -h . usage: porder order [-h] --name NAME --idlist IDLIST --item ITEM --bundle BUNDLE [--sid SID] [--boundary BOUNDARY] [--projection PROJECTION] [--kernel KERNEL] [--compression COMPRESSION] [--aws AWS] [--azure AZURE] [--gcs GCS] [--op OP [OP ...]] optional arguments: -h, --help show this help message and exit Required named arguments.: --name NAME Order Name to be Submitted --idlist IDLIST CSV idlist with item IDs --item ITEM Item Type PSScene4Band|PSOrthoTile|REOrthoTile etc --bundle BUNDLE Bundle Type: analytic, analytic_sr,analytic_sr_udm2 Optional named arguments: --sid SID Subscription ID --boundary BOUNDARY Boundary/geometry for clip operation geojson|json|kml --projection PROJECTION Projection for reproject operation of type &#34;EPSG:4326&#34; --kernel KERNEL Resampling kernel used &#34;near&#34;, &#34;bilinear&#34;, &#34;cubic&#34;, &#34;cubicspline&#34;, &#34;lanczos&#34;, &#34;average&#34; and &#34;mode&#34; --compression COMPRESSION Compression type used for tiff_optimize tool, &#34;lzw&#34;|&#34;deflate&#34; --aws AWS AWS cloud credentials config yml file --azure AZURE Azure cloud credentials config yml file --gcs GCS GCS cloud credentials config yml file --op OP [OP ...] Add operations, delivery &amp; notification clip|toar|harm onize|composite|zip|zipall|compression|projection|kern el|aws|azure|gcs|email &lt;Choose indices from&gt;: ndvi|gndvi|bndvi|ndwi|tvi|osavi|evi2|msavi2|sr . Below we submit the idlist.csv with the order command. Make sure to copy the url that is returned as we will use that in the download step. It should take about 5 minutes for the order to complete. We select the analytic_sr_udm2 bundle, which comes with surface reflectance, metadata, and two versions of Planet&#39;s Usable Data Mask. There are many operations supported besides email, making this one of the more powerful commands for controlling the extent, quality, and kind of data you get back from Planet, so check out the order documentation for more details . !porder order --name &quot;San Pedro Test&quot; --idlist &quot;/home/jovyan/data/idlist.csv&quot; --item &quot;PSScene4Band&quot; --bundle &quot;analytic_sr_udm2&quot; --op email . Headless Setup: Order created at https://api.planet.com/compute/ops/orders/v2/c89ea72a-cff7-4956-b87c-c10cfb79f4e3 . You should receive an email when your order is complete, but you can also check on the status of your order with the following command. Initially it will show that an order is running for 1 user, when it is ready to download, it will show 0 running orders for user. You may see multiple folks running orders, in which case, check your email to see when the order you placed is complete. . !porder stats . Checking on all running orders... Total queued order for organization: 0 Total running orders for organization: 0 Total queued orders for user: 0 Total running orders for user: 0 . Once the order is complete, we can download it. This should go quick. You can copy the order id you receive in the email or the order url above and edit the order url below. If you get an Key error it is probably because you are running the below command with a different order URL. . !porder multiproc -h . usage: porder multiproc [-h] [--url URL] [--local LOCAL] [--ext EXT] optional arguments: -h, --help show this help message and exit --url URL order url you got for your order --local LOCAL Output folder where ordered files will be exported Optional named arguments: --ext EXT File Extension to download . !porder multiproc --url &quot;https://api.planet.com/compute/ops/orders/v2/c89ea72a-cff7-4956-b87c-c10cfb79f4e3&quot; --local &quot;/home/jovyan/data/&quot; . Polling with exponential backoff.. Order completed with status: success Processing a url list with 6 items File Completed at 20190606_164931_104b_metadata.json 6.94s 20190606_164931_104b_manifest.json 6.95s 20190606_164931_104b_3B_AnalyticMS_metadata.xml 7.04s 20190606_164931_104b_3B_AnalyticMS_DN_udm.tif 7.06s 20190606_164931_104b_3B_udm2.tif 7.32s 20190606_164931_104b_3B_AnalyticMS_SR.tif 18.73s . Sweet! We have imagery. Each analytic_sr type Planetscope scene will come with a Usable Data Mask (udm), surface reflectance, and some metadata. Let&#39;s plot the image we downloaded with python! We will use xarray to load in the image data and plot it. rioxarray is a python library that preserves geospatial metadata when reading geotiffs with xarray and brings functionaility for geospatial operations like reprojecting. Both packages can be installed with pip or with conda from the conda-forge channel, and come with the porder_tutorial environment you created. . import xarray as xa import rioxarray %matplotlib inline xa.set_options(display_style = &quot;text&quot;) . &lt;xarray.core.options.set_options at 0x7fc44d7a3048&gt; . san_pedro_sr = xa.open_rasterio(&quot;data/20190606_164931_104b_3B_AnalyticMS_SR.tif&quot;) san_pedro_sr . &lt;xarray.DataArray (band: 4, y: 4091, x: 8251)&gt; [135019364 values with dtype=uint16] Coordinates: * band (band) int64 1 2 3 4 * y (y) float64 3.509e+06 3.509e+06 3.509e+06 ... 3.497e+06 3.497e+06 * x (x) float64 5.668e+05 5.668e+05 5.668e+05 ... 5.915e+05 5.915e+05 Attributes: transform: (3.0, 0.0, 566751.0, 0.0, -3.0, 3509481.0) crs: +init=epsg:32612 res: (3.0, 3.0) is_tiled: 1 nodatavals: (0.0, 0.0, 0.0, 0.0) scales: (1.0, 1.0, 1.0, 1.0) offsets: (0.0, 0.0, 0.0, 0.0) descriptions: (&amp;#x27;blue&amp;#x27;, &amp;#x27;green&amp;#x27;, &amp;#x27;red&amp;#x27;, &amp;#x27;nir&amp;#x27;) AREA_OR_POINT: Area TIFFTAG_DATETIME: 2019:06:06 16:49:31 TIFFTAG_IMAGEDESCRIPTION: {&quot;atmospheric_correction&quot;: {&quot;aerosol_model&quot;: &quot;... . san_pedro_sr_bgr = san_pedro_sr.sel(band=slice(1,3)) # we make a new variable, keeping the blue, green, and red bands . san_pedro_sr_rgb = san_pedro_sr_bgr[::-1, ...] # reversing the order of the band axis from bgr to rgb . The in python we can use xarray&#39;s imshow function to plot single band or rgb data. robust=True clips the visualization to the minimum and maximum values in the dataset. . %matplotlib inline subset = san_pedro_sr_rgb[:,2000:3000,2000:3000] subset.plot.imshow(robust=True) . &lt;matplotlib.image.AxesImage at 0x7fc4851dc8d0&gt; . Let&#39;s take a look at it in QGIS so that we can compare our data to basemap layers. . Our scene looks pretty good once we normalize the display in QGIS by the maximum and minimum of the scene. And with a false color composite, the riparian forest clearly pops out and individual tree crowns are nearly distinguishable. To examine the metadata, the simplest way is to load the json in a tabular format, with rows and columns like an excel spreadsheet. To do this we can use pandas, the python data analysis package. . pandas comes with anaconda and if you don&#39;t have it, do pip install pandas . import pandas as pd pd.read_json(&quot;data/20190606_164931_104b_metadata.json&quot;).drop(&quot;geometry&quot;, axis=1) . id type properties . coordinates 20190606_164931_104b | Feature | NaN | . type 20190606_164931_104b | Feature | NaN | . acquired 20190606_164931_104b | Feature | 2019-06-06T16:49:31.680516Z | . anomalous_pixels 20190606_164931_104b | Feature | 0 | . clear_confidence_percent 20190606_164931_104b | Feature | 97 | . clear_percent 20190606_164931_104b | Feature | 100 | . cloud_cover 20190606_164931_104b | Feature | 0 | . cloud_percent 20190606_164931_104b | Feature | 0 | . columns 20190606_164931_104b | Feature | 8250 | . epsg_code 20190606_164931_104b | Feature | 32612 | . ground_control 20190606_164931_104b | Feature | True | . gsd 20190606_164931_104b | Feature | 3.6 | . heavy_haze_percent 20190606_164931_104b | Feature | 0 | . instrument 20190606_164931_104b | Feature | PS2 | . item_type 20190606_164931_104b | Feature | PSScene4Band | . light_haze_percent 20190606_164931_104b | Feature | 0 | . origin_x 20190606_164931_104b | Feature | 566751 | . origin_y 20190606_164931_104b | Feature | 3509481 | . pixel_resolution 20190606_164931_104b | Feature | 3 | . provider 20190606_164931_104b | Feature | planetscope | . published 20190606_164931_104b | Feature | 2019-06-06T20:25:09.445Z | . quality_category 20190606_164931_104b | Feature | standard | . rows 20190606_164931_104b | Feature | 4092 | . satellite_id 20190606_164931_104b | Feature | 104b | . shadow_percent 20190606_164931_104b | Feature | 0 | . snow_ice_percent 20190606_164931_104b | Feature | 0 | . strip_id 20190606_164931_104b | Feature | 2423031 | . sun_azimuth 20190606_164931_104b | Feature | 95.5 | . sun_elevation 20190606_164931_104b | Feature | 55.5 | . updated 20190606_164931_104b | Feature | 2019-06-07T04:10:09.675Z | . usable_data 20190606_164931_104b | Feature | 0 | . view_angle 20190606_164931_104b | Feature | 3 | . visible_confidence_percent 20190606_164931_104b | Feature | 97 | . visible_percent 20190606_164931_104b | Feature | 100 | . If you have questions about the metadata attributes,a good place to submit questions is the Planet Community Forum. You can find more tutorials on working with Planet imagery, exploring the usable data mask, and more at the Developer Resource Center: https://developers.planet.com/planetschool/ . Keep in mind that some of the tutorials listed are newer than others. Anything referencing the Version 1 API is old, and it&#39;s best to use porder instead. If you&#39;d like advice about which resources to check out next or have questions about how to use Planet in your research, talk to Ryan (ravery@ucsb.edu). .",
            "url": "ryanavery.rocks/tools/2020/04/01/porder-tutorial.html",
            "relUrl": "/tools/2020/04/01/porder-tutorial.html",
            "date": " • Apr 1, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Buidling an MNIST Classifier from scratch with Pytorch",
            "content": "I&#39;ve been following Jermey Howard&#39;s and Sylvain Gugger&#39;s excellent preprint fastbook, their soon to be released book on deep learning and the new fastai2 API. While I&#39;ve been practicing machine learning for land cover segmentation for a while now, I wanted a deeper understanding of the architectures I&#39;ve been using. Chapter 4 provided an excellent walkthrough of building and evaluating a linear classifier and then a simple 3 layer neural network classifier of 3s and 7s. The final challenge after this chapter tasks the reader with the following: . Further research . Create your own implementation of Learner from scratch, based on the training loop shown in this chapter. | Complete all the steps in this chapter using the full MNIST datasets (that is, for all digits, not just threes and sevens). This is a significant project and will take you quite a bit of time to complete! You&#39;ll need to do some of your own research to figure out how to overcome some obstacles you&#39;ll meet on the way. | Source:Under the hood: training a digit classifier . After going through the Ch. 4 tutorial on building a binary classifier from scratch, I decided to jump straight to Challenge number 2 and complete it with functions. Below is the resulting code in case it&#39;s useful for anyone. Big thanks to Jeremy and Sebastian for their generosity in developing the book and fastai course and thanks to the pytorch community for taking the time to answer community questions like this one, which helped me troubleshoot my own issues. . Programming environment setup . I used the nvidia-data-science-stack 2.2 to build a conda environment. This is a nifty tool that makes it easy to set up gpu dependencies. If you build a docker container, you don&#39;t need to mess around with installing nvidia drivers at all. Then I did development installs of fastai2 and fastcore (you can find them on github). You can run this whole tutorial on the cpu, it will take minutes rather than seconds compared to a gpu. . from fastai2.vision.all import * matplotlib.rc(&#39;image&#39;, cmap=&#39;Greys&#39;) data_path = untar_data(URLs.MNIST) data_path.ls() . (#2) [Path(&#39;/home/rave/.fastai/data/mnist_png/training&#39;),Path(&#39;/home/rave/.fastai/data/mnist_png/testing&#39;)] . (data_path/&quot;training&quot;).ls() . (#10) [Path(&#39;/home/rave/.fastai/data/mnist_png/training/5&#39;),Path(&#39;/home/rave/.fastai/data/mnist_png/training/9&#39;),Path(&#39;/home/rave/.fastai/data/mnist_png/training/6&#39;),Path(&#39;/home/rave/.fastai/data/mnist_png/training/7&#39;),Path(&#39;/home/rave/.fastai/data/mnist_png/training/2&#39;),Path(&#39;/home/rave/.fastai/data/mnist_png/training/8&#39;),Path(&#39;/home/rave/.fastai/data/mnist_png/training/4&#39;),Path(&#39;/home/rave/.fastai/data/mnist_png/training/1&#39;),Path(&#39;/home/rave/.fastai/data/mnist_png/training/3&#39;),Path(&#39;/home/rave/.fastai/data/mnist_png/training/0&#39;)] . First we load in the data . def load_x_y(folder): numtensors = [] labellists = [] for num in range(9): num_paths = (data_path/folder/f&#39;{num}&#39;).ls().sorted() tensors = [tensor(Image.open(n)) for n in num_paths] num_tensor = torch.stack(tensors).float()/255.0 numtensors.append(num_tensor) labellists.extend([num]*len(num_paths)) train_x = torch.cat(numtensors).view(-1, 28*28) # list of vectors where each vector is an image. list is ordered from 0 samples to 9 samples train_y = tensor(labellists) return train_x, train_y train_x, train_y = load_x_y(&quot;training&quot;) test_x, test_y = load_x_y(&quot;testing&quot;) train_dl = DataLoader(list(zip(train_x, train_y)), batch_size=256) test_dl = DataLoader(list(zip(test_x, test_y)), batch_size=256) . Each image is reshaped in the load_x_y func to be a vector, so we need to reshaped it with .view to plot it. . show_image(train_x[0].view(28,28)) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc6682e5610&gt; . import matplotlib.pyplot as plt plt.imshow(train_x[0].view(28,28)) plt.savefig(&quot;/home/rave/site/images/mnist_example.png&quot;) . Below are the components of our network and training plan. . def train_model(model, lr=1, epochs = 20): for i in range(epochs): # step 6 define a stopping condition, the number of epochs in this case. loss = train_epoch( model, lr) print(&quot;Loss for all MNIST classes Train: &quot;, loss) print(&quot;Total Test Accuracy For all MNIST classes: &quot;, validate_epoch(model)) # step 5 calculate accuracy def validate_epoch(model): accs = [batch_accuracy(model(x_batch), y_batch) for x_batch, y_batch in test_dl] return round(torch.stack(accs).mean().item(), 4) def batch_accuracy(prediction_batch, label_batch): prob_scores = prediction_batch.softmax(1) # gets final activations into range of 0,1 so that all add up to 1 accuracy = get_num_correct(prob_scores, label_batch) / float( label_batch.size(0) ) # sum the right predictions, divide by total number of isntances return accuracy def get_num_correct(preds, labels): return preds.argmax(dim=1).eq(labels).sum().float() # labels needs to be a 1d tensor for this comparison for broadcasting def train_epoch(model, lr): losses = [] for xs, ys in train_dl: # step 4 continue another forward pass and repeat for another epoch # calcualtes the gradient with respect to weight and bias params at each layer of the model loss = calc_grad(xs, ys, model) for p in params: # modifies params in place, step 3 update the params (this uses the backprop calculated gradient) p.data = p.data - p.grad * lr p.grad.zero_() losses.append(loss.detach()) return torch.stack(losses).mean() # step 2 calculate gradient def calc_grad(x_batch, y_batch, model, loss_func=F.cross_entropy): predictions = model(x_batch) loss = loss_func(predictions, y_batch) loss.backward() return loss def linear_layer(xb): return xb@ws + bs . First step is to initialize random weights . def init_params(size, std=1.0): return (torch.randn(size)*std).requires_grad_() ws = init_params((28*28,10)) bs = init_params(10) params = ws, bs lr = 1.0 . validate_epoch(linear_layer) . 0.1255 . lr = 1. params = ws, bs train_epoch(linear_layer, lr) validate_epoch(linear_layer) . 0.1684 . Our accuracy improves! We can now train a full model with multiple epochs. . train_model(linear_layer, lr=1) . Loss for all MNIST classes Train: tensor(0.6126) Total Test Accuracy For all MNIST classes: 0.2942 Loss for all MNIST classes Train: tensor(0.4020) Total Test Accuracy For all MNIST classes: 0.3543 Loss for all MNIST classes Train: tensor(0.3152) Total Test Accuracy For all MNIST classes: 0.3799 Loss for all MNIST classes Train: tensor(0.2817) Total Test Accuracy For all MNIST classes: 0.3963 Loss for all MNIST classes Train: tensor(0.2605) Total Test Accuracy For all MNIST classes: 0.4109 Loss for all MNIST classes Train: tensor(0.2467) Total Test Accuracy For all MNIST classes: 0.4248 Loss for all MNIST classes Train: tensor(0.2371) Total Test Accuracy For all MNIST classes: 0.4374 Loss for all MNIST classes Train: tensor(0.2295) Total Test Accuracy For all MNIST classes: 0.4455 Loss for all MNIST classes Train: tensor(0.2229) Total Test Accuracy For all MNIST classes: 0.454 Loss for all MNIST classes Train: tensor(0.2170) Total Test Accuracy For all MNIST classes: 0.463 Loss for all MNIST classes Train: tensor(0.2114) Total Test Accuracy For all MNIST classes: 0.4702 Loss for all MNIST classes Train: tensor(0.2061) Total Test Accuracy For all MNIST classes: 0.4765 Loss for all MNIST classes Train: tensor(0.2010) Total Test Accuracy For all MNIST classes: 0.4799 Loss for all MNIST classes Train: tensor(0.1962) Total Test Accuracy For all MNIST classes: 0.4833 Loss for all MNIST classes Train: tensor(0.1918) Total Test Accuracy For all MNIST classes: 0.4856 Loss for all MNIST classes Train: tensor(0.1876) Total Test Accuracy For all MNIST classes: 0.4896 Loss for all MNIST classes Train: tensor(0.1837) Total Test Accuracy For all MNIST classes: 0.4913 Loss for all MNIST classes Train: tensor(0.1802) Total Test Accuracy For all MNIST classes: 0.4945 Loss for all MNIST classes Train: tensor(0.1770) Total Test Accuracy For all MNIST classes: 0.4961 Loss for all MNIST classes Train: tensor(0.1740) Total Test Accuracy For all MNIST classes: 0.4978 . Much of the above code can be compressed down to the following code chunk using fastai, plus I&#39;m testing a simple 2 (3?) layer net instead of a simpler linear model. . dls = DataLoaders(train_dl, test_dl) simple_net = nn.Sequential( nn.Linear(28*28,30), # 28*28 is shape of image input nn.ReLU(), nn.Linear(30, 10) # 10 classes, 10 ending neurons ) learn = Learner(dls, simple_net, opt_func=SGD, loss_func=F.cross_entropy, metrics=batch_accuracy) learn.fit(20, .01) . epoch train_loss valid_loss batch_accuracy time . 0 | 1.477771 | 2.973853 | 0.108331 | 00:00 | . 1 | 0.943950 | 2.823479 | 0.109776 | 00:00 | . 2 | 0.689013 | 2.432964 | 0.175064 | 00:00 | . 3 | 0.551735 | 2.100434 | 0.299855 | 00:00 | . 4 | 0.472151 | 1.843670 | 0.385163 | 00:00 | . 5 | 0.420042 | 1.648977 | 0.432432 | 00:00 | . 6 | 0.383341 | 1.498606 | 0.476365 | 00:00 | . 7 | 0.356098 | 1.379916 | 0.515071 | 00:00 | . 8 | 0.335129 | 1.284503 | 0.550328 | 00:00 | . 9 | 0.318766 | 1.206264 | 0.577021 | 00:00 | . 10 | 0.305560 | 1.141383 | 0.598042 | 00:00 | . 11 | 0.294642 | 1.086604 | 0.616950 | 00:00 | . 12 | 0.285455 | 1.039767 | 0.635080 | 00:00 | . 13 | 0.277556 | 0.999074 | 0.650206 | 00:00 | . 14 | 0.270682 | 0.963757 | 0.660883 | 00:00 | . 15 | 0.264624 | 0.932953 | 0.672895 | 00:00 | . 16 | 0.259144 | 0.906086 | 0.682905 | 00:00 | . 17 | 0.254295 | 0.882171 | 0.690802 | 00:00 | . 18 | 0.249852 | 0.860789 | 0.700589 | 00:00 | . 19 | 0.245791 | 0.841390 | 0.706818 | 00:00 | . Adding a relu and another linear layer gets us an increase in accuracy from about 50% to 70% with the same number of epochs (try training for longer and with different numbers of neurons in the first linear layer, which makes a bigger difference)? . Some issues I ran into include: . multilabel softmax loss wasn&#39;t working, not sure why it wasn&#39;t the right loss function, but cross entropy worked after I set the weights and bias shapes so that the last dimension was 10 for the 10 &quot;probability&quot; scores for each digit. | I also had to find broadcasting errors. My accuracy was increasing above 1 until I found that the y_labels in batch_accuracy need to be a 1D tensor when doing comparisons with argmax. I had called unsqueeze in load_x_y on these label arrays which added an extra dimension that caused the broadcasting issue. | I kept running into cases where my loss was decreasing but my accuracy stayed the same, probably having to do with messy jupyter notebook state. | . .",
            "url": "ryanavery.rocks/ml/2020/03/14/MNIST-with-pytorch.html",
            "relUrl": "/ml/2020/03/14/MNIST-with-pytorch.html",
            "date": " • Mar 14, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "ryanavery.rocks/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "ryanavery.rocks/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "ryanavery.rocks/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "ryanavery.rocks/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}